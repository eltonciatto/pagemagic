version: '3.8'

services:
  # Database
  postgres:
    image: postgres:16
    environment:
      POSTGRES_DB: pagemagic
      POSTGRES_USER: pagemagic
      POSTGRES_PASSWORD: pagemagic_dev
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./infrastructure/sql/init.sql:/docker-entrypoint-initdb.d/init.sql

  # TimescaleDB for metrics
  timescaledb:
    image: timescale/timescaledb:latest-pg16
    environment:
      POSTGRES_DB: metrics
      POSTGRES_USER: metrics
      POSTGRES_PASSWORD: metrics_dev
    ports:
      - "5433:5432"
    volumes:
      - timescale_data:/var/lib/postgresql/data

  # Redis for caching
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data

  # NATS JetStream
  nats:
    image: nats:2.10-alpine
    ports:
      - "4222:4222"
      - "8222:8222"
    command: ["--jetstream", "--store_dir", "/data"]
    volumes:
      - nats_data:/data

  # MinIO for file storage
  minio:
    image: minio/minio:latest
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: pagemagic
      MINIO_ROOT_PASSWORD: pagemagic_dev
    command: server /data --console-address ":9001"
    volumes:
      - minio_data:/data

  # Auth Service
  auth-svc:
    build: ./services/auth-svc
    ports:
      - "8001:8080"
    environment:
      DATABASE_URL: postgres://pagemagic:pagemagic_dev@postgres:5432/pagemagic
      JWT_SECRET: super_secret_jwt_key_dev
      REDIS_URL: redis://redis:6379
    depends_on:
      - postgres
      - redis

  # Prompt Service
  prompt-svc:
    build: ./services/prompt-svc
    ports:
      - "8002:3000"
    environment:
      DATABASE_URL: postgres://pagemagic:pagemagic_dev@postgres:5432/pagemagic
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      VLLM_ENDPOINT: http://vllm:8000
      NATS_URL: nats://nats:4222
    depends_on:
      - postgres
      - nats

  # Builder Service
  builder-svc:
    build: ./services/builder-svc
    ports:
      - "8003:8080"
    environment:
      DATABASE_URL: postgres://pagemagic:pagemagic_dev@postgres:5432/pagemagic
      REDIS_URL: redis://redis:6379
    depends_on:
      - postgres
      - redis

  # Build Service
  build-svc:
    build: ./services/build-svc
    ports:
      - "8004:8080"
    environment:
      DATABASE_URL: postgres://pagemagic:pagemagic_dev@postgres:5432/pagemagic
      DOCKER_HOST: unix:///var/run/docker.sock
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      - postgres

  # Host Service
  host-svc:
    build: ./services/host-svc
    ports:
      - "8005:8080"
    environment:
      DATABASE_URL: postgres://pagemagic:pagemagic_dev@postgres:5432/pagemagic
      DOCKER_HOST: unix:///var/run/docker.sock
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      - postgres

  # Domain Service
  domain-svc:
    build: ./services/domain-svc
    ports:
      - "8006:8000"
    environment:
      DATABASE_URL: postgres://pagemagic:pagemagic_dev@postgres:5432/pagemagic
      CLOUDFLARE_API_TOKEN: ${CLOUDFLARE_API_TOKEN}
    depends_on:
      - postgres

  # Meter Service
  meter-svc:
    build: ./services/meter-svc
    ports:
      - "8007:8080"
    environment:
      TIMESCALE_URL: postgres://metrics:metrics_dev@timescaledb:5432/metrics
      STRIPE_SECRET_KEY: ${STRIPE_SECRET_KEY}
      NATS_URL: nats://nats:4222
    depends_on:
      - timescaledb
      - nats

  # Billing Service
  billing-svc:
    build: ./services/billing-svc
    ports:
      - "8008:8080"
    environment:
      DATABASE_URL: postgres://pagemagic:pagemagic_dev@postgres:5432/pagemagic
      STRIPE_SECRET_KEY: ${STRIPE_SECRET_KEY}
      STRIPE_WEBHOOK_SECRET: ${STRIPE_WEBHOOK_SECRET}
    depends_on:
      - postgres

  # i18n Service
  i18n-svc:
    build: ./services/i18n-svc
    ports:
      - "8009:3000"
    environment:
      DATABASE_URL: postgres://pagemagic:pagemagic_dev@postgres:5432/pagemagic
      REDIS_URL: redis://redis:6379
    depends_on:
      - postgres
      - redis

  # Usage Proxy (Nginx + Lua)
  usage-proxy:
    build: ./services/usage-proxy
    ports:
      - "8080:80"
    environment:
      METER_SVC_URL: http://meter-svc:8080
    depends_on:
      - meter-svc

  # Frontend Web
  front-web:
    build: ./apps/front-web
    ports:
      - "3000:3000"
    environment:
      NEXT_PUBLIC_API_URL: http://localhost:8080
      NEXTAUTH_URL: http://localhost:3000
      NEXTAUTH_SECRET: nextauth_secret_dev
      AUTH_SVC_URL: http://auth-svc:8080
    depends_on:
      - usage-proxy

volumes:
  postgres_data:
  timescale_data:
  redis_data:
  nats_data:
  minio_data:
