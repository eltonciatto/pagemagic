# Grafana Deployment for Page Magic

apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: monitoring
  labels:
    app: grafana
    app.kubernetes.io/part-of: pagemagic
spec:
  replicas: 2
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
        app.kubernetes.io/part-of: pagemagic
    spec:
      serviceAccountName: grafana
      containers:
      - name: grafana
        image: grafana/grafana:10.2.0
        ports:
        - containerPort: 3000
          name: http
        env:
        - name: GF_SECURITY_ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              name: grafana-secrets
              key: admin-password
        - name: GF_DATABASE_TYPE
          value: postgres
        - name: GF_DATABASE_HOST
          value: postgresql.pagemagic-prod.svc.cluster.local:5432
        - name: GF_DATABASE_NAME
          value: grafana
        - name: GF_DATABASE_USER
          valueFrom:
            secretKeyRef:
              name: grafana-secrets
              key: db-user
        - name: GF_DATABASE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: grafana-secrets
              key: db-password
        volumeMounts:
        - name: grafana-storage
          mountPath: /var/lib/grafana
        - name: grafana-config
          mountPath: /etc/grafana/grafana.ini
          subPath: grafana.ini
        - name: grafana-dashboards
          mountPath: /etc/grafana/provisioning/dashboards
        - name: grafana-datasources
          mountPath: /etc/grafana/provisioning/datasources
        resources:
          requests:
            memory: 256Mi
            cpu: 100m
          limits:
            memory: 1Gi
            cpu: 500m
        livenessProbe:
          httpGet:
            path: /api/health
            port: 3000
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /api/health
            port: 3000
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: grafana-storage
        persistentVolumeClaim:
          claimName: grafana-pvc
      - name: grafana-config
        configMap:
          name: grafana-config
      - name: grafana-dashboards
        configMap:
          name: grafana-dashboards
      - name: grafana-datasources
        configMap:
          name: grafana-datasources
---
apiVersion: v1
kind: Service
metadata:
  name: grafana
  namespace: monitoring
  labels:
    app: grafana
    app.kubernetes.io/part-of: pagemagic
spec:
  type: ClusterIP
  ports:
  - port: 3000
    targetPort: 3000
    name: http
  selector:
    app: grafana
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: grafana-pvc
  namespace: monitoring
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 20Gi
  storageClassName: gp3
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-config
  namespace: monitoring
data:
  grafana.ini: |
    [analytics]
    check_for_updates = true
    
    [grafana_net]
    url = https://grafana.net
    
    [log]
    mode = console
    level = info
    
    [paths]
    data = /var/lib/grafana/
    logs = /var/log/grafana
    plugins = /var/lib/grafana/plugins
    provisioning = /etc/grafana/provisioning
    
    [server]
    protocol = http
    http_port = 3000
    domain = grafana.pagemagic.com
    root_url = https://grafana.pagemagic.com
    
    [database]
    type = postgres
    host = postgresql.pagemagic-prod.svc.cluster.local:5432
    name = grafana
    
    [session]
    provider = postgres
    provider_config = user=grafana dbname=grafana sslmode=disable
    
    [security]
    admin_user = admin
    disable_gravatar = false
    
    [users]
    allow_sign_up = false
    allow_org_create = false
    auto_assign_org = true
    auto_assign_org_role = Viewer
    
    [auth]
    disable_login_form = false
    
    [auth.oauth2]
    enabled = true
    name = OAuth2
    allow_sign_up = true
    client_id = pagemagic-grafana
    scopes = openid profile email
    auth_url = https://auth.pagemagic.com/oauth2/authorize
    token_url = https://auth.pagemagic.com/oauth2/token
    api_url = https://auth.pagemagic.com/oauth2/userinfo
    
    [smtp]
    enabled = true
    host = smtp.pagemagic.com:587
    user = grafana@pagemagic.com
    from_address = grafana@pagemagic.com
    from_name = PageMagic Grafana
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-datasources
  namespace: monitoring
data:
  datasources.yaml: |
    apiVersion: 1
    datasources:
    - name: Prometheus
      type: prometheus
      access: proxy
      url: http://pagemagic-prometheus.monitoring.svc.cluster.local:9090
      isDefault: true
      editable: false
    - name: Jaeger
      type: jaeger
      access: proxy
      url: http://jaeger-query.tracing.svc.cluster.local:16686
      editable: false
    - name: Loki
      type: loki
      access: proxy
      url: http://loki.logging.svc.cluster.local:3100
      editable: false
    - name: PostgreSQL
      type: postgres
      url: postgresql.pagemagic-prod.svc.cluster.local:5432
      database: pagemagic
      user: grafana_reader
      secureJsonData:
        password: ${GRAFANA_DB_PASSWORD}
      jsonData:
        sslmode: disable
        maxOpenConns: 100
        maxIdleConns: 100
        connMaxLifetime: 14400
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-dashboards
  namespace: monitoring
data:
  dashboards.yaml: |
    apiVersion: 1
    providers:
    - name: 'pagemagic-dashboards'
      orgId: 1
      folder: 'PageMagic'
      type: file
      disableDeletion: false
      editable: true
      updateIntervalSeconds: 30
      allowUiUpdates: true
      options:
        path: /etc/grafana/provisioning/dashboards/pagemagic
  
  pagemagic-overview.json: |
    {
      "dashboard": {
        "id": null,
        "title": "PageMagic - System Overview",
        "tags": ["pagemagic", "overview"],
        "timezone": "browser",
        "panels": [
          {
            "id": 1,
            "title": "Service Health",
            "type": "stat",
            "targets": [
              {
                "expr": "up{job=~\"pagemagic-.*\"}",
                "legendFormat": "{{job}}"
              }
            ],
            "gridPos": {"h": 8, "w": 12, "x": 0, "y": 0}
          },
          {
            "id": 2,
            "title": "Request Rate",
            "type": "graph",
            "targets": [
              {
                "expr": "sum(rate(http_requests_total{job=~\"pagemagic-.*\"}[5m])) by (job)",
                "legendFormat": "{{job}}"
              }
            ],
            "gridPos": {"h": 8, "w": 12, "x": 12, "y": 0}
          },
          {
            "id": 3,
            "title": "Error Rate",
            "type": "graph",
            "targets": [
              {
                "expr": "sum(rate(http_requests_total{job=~\"pagemagic-.*\",status=~\"5..\"}[5m])) by (job)",
                "legendFormat": "{{job}} errors"
              }
            ],
            "gridPos": {"h": 8, "w": 12, "x": 0, "y": 8}
          },
          {
            "id": 4,
            "title": "Response Time P95",
            "type": "graph",
            "targets": [
              {
                "expr": "histogram_quantile(0.95, sum(rate(http_request_duration_seconds_bucket{job=~\"pagemagic-.*\"}[5m])) by (le, job))",
                "legendFormat": "{{job}} p95"
              }
            ],
            "gridPos": {"h": 8, "w": 12, "x": 12, "y": 8}
          }
        ],
        "time": {"from": "now-1h", "to": "now"},
        "refresh": "30s"
      }
    }
